
/************************************************** Types ***************************************************/
type_name
    : predefined_type_name
    ;

predefined_type_name
    : BOOL
    | BYTE
    | CHAR
    | DECIMAL
    | DOUBLE
    | FLOAT
    | INT
    | LONG
    | OBJECT
    | SBYTE
    | SHORT
    | STRING
    | UINT
    | ULONG
    | USHORT
    | VOID
    ;

/************************************************ Statements ************************************************/
statement_seq
    : statement
    | statement_seq statement
    ;

statement
    : block
    | declaration_statement
    | expression_statement
    ;

expression_statement
    : expression SEMICOLON
    ;

declaration_statement
    : var_declaration SEMICOLON
    ;

var_declaration
    : type_name ID ASSIGN var_initializer
    ;

var_initializer
    : expression
    ;

/************************************************ Expressions ***********************************************/

argument_list
    : argument
    | argument COMMA argument_list
    ;

argument
    : REF expression
    | OUT expression
    | expression
    ;

expression
	: conditional_expression
    | conditional_expression IS type_name
    | conditional_expression AS type_name
    | conditional_expression QUESTION expression COLON expression
	;

conditional_expression
    : relation_expression
    | relation_expression OR conditional_expression
    | relation_expression AND conditional_expression
    | relation_expression BIT_OR conditional_expression
    | relation_expression BIT_XOR conditional_expression
    | relation_expression BIT_AND conditional_expression
    ;

relation_expression
    : arithmetic_expression
    | arithmetic_expression EQUAL relation_expression
    | arithmetic_expression NOT_EQUAL relation_expression
    | arithmetic_expression LESS relation_expression
    | arithmetic_expression GREATER relation_expression
    | arithmetic_expression LESS_OR_EQUAL relation_expression
    | arithmetic_expression GREATER_OR_EQUAL relation_expression
    ;

arithmetic_expression
    : factor_expression
    | factor_expression PLUS arithmetic_expression
    | factor_expression MINUS arithmetic_expression
    ;

factor_expression
    : unary_expression
    | unary_expression MULTIPLY factor_expression
    | unary_expression DIVIDE factor_expression
    | unary_expression MOD factor_expression
    | unary_expression LEFT_SHIFT factor_expression
    | unary_expression RIGHT_SHIFT factor_expression
    ;

unary_expression
    | MINUS primary_expression
    | NOT primary_expression
    | MULTIPLY primary_expression
    | prefix_increment
    | DECREMENT primary_expression
    | primary_expression
	;

primary_expression
    : literal
    | cast_expression
    | parenthesis_expression
    | invocation_expression
	| element_access
    | var_access
    | postfix_increment
    | postfix_decrement
    | object_creation
    ;

cast_expression
    : OPEN_PAREN type_name CLOSE_PAREN unary_expression
    ;

parenthesis_expression
    : OPEN_PAREN expression CLOSE_PAREN
    ;

invocation_expression
    : ID OPEN_PAREN argument_list CLOSE_PAREN
    ;

element_access
    : ID OPEN_SQUARE_BRACE expression_list CLOSE_SQUARE_BRACE
    ;

expression_list
    : expression
    | expression COMMA expression_list
    ;

var_access
	: ID
	;

postfix_increment
    : ID INCREMENT
    ;

postfix_decrement
    : ID DECREMENT
    ;

object_creation
    : NEW type_name OPEN_PAREN argument_list CLOSE_PAREN
    | NEW type_name OPEN_PAREN CLOSE_PAREN
    ;

/************************************************* Literals *************************************************/
literal
    : INT_CONST
    | FLOAT_CONST
    | DOUBLE_CONST
    | TRUE
    | FALSE
    ;